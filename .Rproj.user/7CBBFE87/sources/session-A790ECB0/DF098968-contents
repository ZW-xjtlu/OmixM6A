---
title: "Lab Practical 5: Genomic Data Science for Epigenetics"
output:
  html_document:
    toc: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(message = FALSE,
                      warning = FALSE,
                      fig.align = "center",
                      fig.height = 3.2,
                      fig.width = 6.5)
```

## The Outline for Lab Practical 5.

Lab Practical 5 aims to discover a set of genomic features that could explain and predict the pattern of epigenetic status on the genome. Firstly, we will try to apply basic Bioconductor tools to extract the genomic land markers from the gene annotations. Then, we will analyze a published epigenetic modification data using the extracted annotations. Explicitly, we will investigate its consensus motifs, exon lengths, as well as its meta distributions on genes. In the end, we will try to develop a prediction tool for the epigenetic modification using machine learning, and see if we can integrate the genomic topologies discovered from the EDA to enhance its prediction performance.

This project tries to reproduce the key findings in the following papers, please check them if you need more background information:

*1.Dominissini D, Moshitch-Moshkovitz S, Schwartz S, Salmon-Divon M, Ungar L, Osenberg S, Cesarkas K, Jacob-Hirsch J, Amariglio N, Kupiec M: Topology of the human and mouse m6A RNA methylomes revealed by m6A-seq. Nature 2012, 485(7397):201-206.*

*2.Meyer KD, Yogesh S, Paul Z, Olivier E, Mason CE, Jaffrey SR: Comprehensive analysis of mRNA methylation reveals enrichment in 3' UTRs and near stop codons. Cell 2012, 149(7):1635â€“1646.*

## 1. Extract Transcriptomic Landmarkers (10%)

First, our goal is to extract some important genomic features for the later analysis. Retrieve the 4 transcriptomic landmarks shown below from the `TxDb` package of hg19. 

- Transcription Start Sites (TSS).
- Transcription Ending Sites (TES).
- Stop Codon.
- Start Codon.

To achieve this, we need to rely on the combination of a set of "intra-range methods". The extracted landmarks should be `GRanges` object with width = 1. Please store the results into the variables of `TSS`, `TES`, `Start_codon`, and `Stop_codon`, respectively. 

Hint: `resize()` can be used to retrieve the start / end of a genomic reanges, `transcripts()` can extract the `GRanges` of full transcript (with introns) from `TxDb` object, and `cdsBy()` can retrieve a `GRangesList` that contains exons of CDS for each transcript / genes.  Please try to understand these data structures, and be careful that the `cdsBy()` returns multiple exons of a CDS, not the full CDS with introns.

```{r}
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb_hg19 <- TxDb.Hsapiens.UCSC.hg19.knownGene
## === Hint code, fill the "___" ============= ##
# TSS <- ___(transcripts(txdb_hg19), width = ___, fix = ___)
# TES <- ___(transcripts(txdb_hg19), width = ___, fix = ___)
# Start_codon <- ___(unlist(range(cdsBy(txdb_hg19, by = "tx"))), width = ___, fix = ___)
# Stop_codon <- ___(unlist(range(cdsBy(txdb_hg19, by = "tx"))), width = ___, fix = ___)
# #Some extra hints, the missing functions above are all inter/intra-range methods
## ===== Enter your code below  =============== ##
TSS <- resize(transcripts(txdb_hg19), width = 3, fix = "start")
TES <- resize(transcripts(txdb_hg19), width = 3, fix = "end")
Start_codon <- resize(unlist(range(cdsBy(txdb_hg19, by = "tx"))), width = 3, fix = "start")
Stop_codon <- resize(unlist(range(cdsBy(txdb_hg19, by = "tx"))), width = 3, fix = "end")
```

- SAQ1: How many unique coordinates for TSS, TES, Start codons, and Stop codons exist on the genome assembly hg19? Is there more alternative usage for the start codons or stop codons? How about the alternative usage for the transcription starts and ends?

P.S. The uniqueness is defined as not having duplicated sites that get the same coordinate with the existing ones. You can apply the intra-range method `reduce()` to merge the duplicated GRanges.

```{r}
number_of_TTS <-length(reduce(TSS))
number_of_TES <-length(reduce(TES))
number_of_Start_codon <-length(reduce(Start_codon))
number_of_Stop_codon <-length(reduce(Stop_codon))
number_of_genes <- length(genes(TxDb.Hsapiens.UCSC.hg19.knownGene))
number_of_TTS
number_of_TES
number_of_Start_codon
number_of_Stop_codon
a <- number_of_Start_codon - number_of_genes
b <- number_of_Stop_codon - number_of_genes
c <- number_of_TTS - number_of_genes
d <- number_of_TES - number_of_genes
a
b
c
d
```

- Answer: 51253,45743,36468,33564,yes,28197,22687

### Examine the Sequence Around the Start and Stop Codons (10%)

In this step, we will extract the sequences within the 3 bases windows containing Start and Stop condons, then, we will plot the sequence logo around the stop and start codons.

Plot the sequence logo for the start and stop codons using `ggseqlogo()`, set the method = "prob", so that it will display the proportion of bases at each nucleotide position.

```{r, fig.width = 4, fig.height = 2.5}
## === Hint code, fill the "___" ============= ##
#library(ggseqlogo)
#library(BSgenome.___.UCSC.___)
#ggseqlogo(as.vector( ___( ___(Hsapiens,Start_codon) ) ), method = "prob")
#ggseqlogo(as.vector( ___( ___(Hsapiens,Stop_codon) ) ), method = "prob")
## ===== Enter your code below  =============== ##
library(ggseqlogo)
library(BSgenome.Hsapiens.UCSC.hg19)
ggseqlogo(as.vector(getSeq(Hsapiens,Start_codon)), method = "prob")
ggseqlogo(as.vector(getSeq(Hsapiens,Stop_codon)), method = "prob")
```

Then, check if the generated sequence logos being mostly consistent with the codon sequences in the common knowledge.

## 2. Motif Finding over Epigenetic Modification Peaks (20%)

Next, we will analyze a BED file named `GSE63753.bed` stored under the project directory. The BED file contains sites of a epigenetic marker downloaded from GEO under: (https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE63753)

The data was originally reported and uploaded by the following paper:

*Linder, B., Grozhik, A. V., Olarerin-George, A. O., Meydan, C., Mason, C. E., & Jaffrey, S. R. (2015). Single-nucleotide-resolution mapping of m6A and m6Am throughout the transcriptome. Nature methods, 12(8), 767-772.*

The BED file contains the "single-based" sites of RNA m6A modification identified by a technique called miCLIP. m6A is a crucial covalent modification regulating mRNA localization, translation, and turn-over.  Like many other key gene expression regulators, m6A sites are deposited via a consensus motifs along the genome.

In the following code chunk, we will first examine the sequence composition around the m6A modification sites, then, we will visualize the motif PPM using sequence logo plot.

```{r}
library(rtracklayer)
## === Hint code, fill the "___" ============= ##
#m6A_sites <- import(___) #Load the BED file for single-based m6A
#dss <- ___ #Extract the underlying sequences of sites flanked by 2bp (+2)
#dss
#csm <- consensusMatrix(dss)[1:4,] #Calculate the consensus Matrix over nucleotides and positions
#csm
#___(___) #visualize motif PPM with sequence logo 
## ===== Enter your code below  =============== ##
m6A_sites <- import("GSE63753.bed") 
dss <- getSeq(Hsapiens,resize(m6A_sites, width = width(m6A_sites) + 4, fix = "center"))
dss
csm <- consensusMatrix(dss)[1:4,] 
csm
ggseqlogo(csm) 
```
m6A_sites <- import("GSE63753.bed") 
dss <- getSeq(Hsapiens,resize(m6A_sites, width = width(m6A_sites) + 4, fix = "center"))
dss
csm <- consensusMatrix(dss)[1:4,] 
csm
ggseqlogo(csm) 

Next, we will analyze motif using the m6A peaks identified from MeRIP-Seq (a CHIP-Seq like technique for RNA modification identification). The m6A peaks are stored in the BED file `GSE54365.bed`. In the code chunk below, extract the sequence behind the peaks, save the DNAStringSet as a fasta file in the current working directory. 

```{r}
## === Hint code, fill the "___" ============= ##
#m6Apeaks <-
#peaks_dss <- ___(___) 
#export(___)
## ===== Enter your code below  =============== ##
m6Apeaks <- import("GSE54365.bed")
peaks_dss <-  getSeq(Hsapiens,m6Apeaks)
names(peaks_dss) <- 1:length(peaks_dss) # name the peak GRanges to get ID in fasta
export(peaks_dss, "m6Apeaks_sequences.fasta")
```

Then, go to the following MEME website, enter the MEME page, upload the fasta file and run the MEME analysis, set both the minimum and maximum motif lengths equal to 5.

https://meme-suite.org/meme

- SAQ2: Based on the MEME report, is there a similar motif identified as we have seen in the miCLIP data? What is the E-value of the m6A motif?

- Answer: AGGGA e=4.9e+002

## 3. Analysis of Epigenetic Modification using Genomic Features (35%)

### Length of Exons (10%)

Subsequently, we will explore the correlation between exon lengths and m6A modification. One of the approaches to do it is to plot the distribution of exon lengths for exons containing or not containing the m6A sites.

Fill in the code below, so that we will create 2 vectors of the same lengths. The first vector named `length_exon` contains length for each exon on hg19, while the second vector named `overlap_m6A` is a dummy variable (logical), and it will be true if the exon contains m6A. Then,  run the code afterward to plot the densities of exon lengths stratified by the overlapping status with the modification.

```{r}
## === Hint code, fill the "___" ============= ##
#ex_hg19 <- ___(___) #extract exons of hg19 using exons()
#length_exon <- ___(___) #extract the lengths for each of the exons
#overlap_m6A <- ___%over%___ #retrieve a dummy variable, true if exon overlapps with m6A
# ===== Enter your code below  =============== ##
ex_hg19 <- exons(txdb_hg19)
length_exon <- width(ex_hg19) 
overlap_m6A <- ex_hg19%over%m6A_sites
# ===== Your code is finished ================ ##
library(ggplot2)
library(ggsci)
ggplot(data.frame(length_exon,overlap_m6A)) +
                   geom_density(aes(x = log(length_exon),
                                    colour = overlap_m6A,
                                    fill = overlap_m6A), alpha = 0.5) + 
                   theme_classic() + scale_color_npg()
```

- SAQ3: Interpret the density plot, what is the difference between the exons containing the modification and the exons without the modification? Do we more likely to observe m6A on long exons? If there is a boundary of exon length to classify the exons containing or not containing the m6A, what boundary would you choose?

- Answer:  The exons containing the modification is longer than the exons without the modification.
on short exons. in short exons there are less gene than long exons. The m6A is easy to find without the influence of other genes.
5, because the peak of false is less than 5 and after 5 there many exons contain m6A

### Topology (Distribution) of Markers on Genes (25%)

Next, we want to draw a meta-gene plot. The plot summarizes the spatial distribution of genomic features over transcript coordinates in relation to the start and the stop codons. You could see Figure 5D in Meyer KD.et.al Nature(2012) for a reference.

It turns out the information required to generate this figure is not complex: the only values needed are the relative positions of each site on 5'UTR, CDS, and 3'UTR. After computing the relative positions, the only step needed is to draw 3 histograms of the relative positions for each region, and the gene-wised distribution is just the concatenated result of the 3 histograms.

In the following code chunk, you need to create a function called `relative_pos_on_region()`. The function will return the relative position of its input GRanges (specified by parameter `x`) on the GRangesList (specified parameter `region`). The relative position on a region is defined as the distance toward the 5' Start of the region divided by the full length of the region. 

For example, if a site is located on the 200bp downstream of the start of a 5'UTR which has length of 1000bp, then its relative position on the 5'UTR is 200/1000 = 0.2. For the elements of x that do not overlap with the region, the function should behave by skipping those elements, and only the relative positions for the overlapped x are returned. 

```{r}
## === fill the "___" to complete the following function ============= ##
relative_pos_on_region <- function(x, region){
# `x` parameter shouuld be a GRanges of the queried sites on the Genome coordinate.
# `region` parameter should be a GRangesList of the transcript/5'UTR/CDS/3'UTR, the elements within it will be exons.
# The line below map the GRanges in x into the coordinate of the transcript/5'UTR/CDS/3'UTR (specified by region).
region_map <- mapToTranscripts(x, region)
# The line below calculates the exonic length of the transcript/5'UTR/CDS/3'UTR. You need to index the vector to make it match to the GRanges in x.
region_width <- sum(width(region))[region_map$transcriptsHits]
# The line below extract a vector for the start coordinate of transcript/5'UTR/CDS/3'UTR.
start_on_region <- start(region_map)
# The line below returns a vector of the relative position by dividing the vectors for start coordinate and the region length.
return(start_on_region / region_width)
}

plot_tx <- function(marker,utr5_gr,cds_gr,utr3_gr,marker_name){
  utr5_pos <- relative_pos_on_region(marker,utr5_gr)
  cds_pos <- relative_pos_on_region(marker,cds_gr)
  utr3_pos <- relative_pos_on_region(marker,utr3_gr)

  pldf <- data.frame(relative_pos = c(utr5_pos, cds_pos, utr3_pos),
                     tx_region = rep(c("5'UTR","CDS","3'UTR"),
                                     c(length(utr5_pos),length(cds_pos),length(utr3_pos)))
             )

  pldf$tx_region = factor(pldf$tx_region,levels = c("5'UTR","CDS","3'UTR"))

  ggplot(pldf) +
    geom_histogram(aes(x=relative_pos),bins = 50,
                   colour = "black", fill = "black") +
    facet_wrap(~tx_region) +
    theme_classic() +
    labs(title = marker_name, x = "Relative Position")
} #This function just organize the data and plot the histogram.

#Extract the regions for 5'UTR, CDS, and 3'UTR
UTR5 <- fiveUTRsByTranscript(txdb_hg19) 
CDS <- cdsBy(txdb_hg19, by = "tx")
UTR3 <- threeUTRsByTranscript(txdb_hg19)

#Then we will generate a serious of plot for the topology of previously extracted tx land markers
plot_tx(TSS,UTR5,CDS,UTR3,"TSS")
plot_tx(TES,UTR5,CDS,UTR3,"TES")
plot_tx(Stop_codon,UTR5,CDS,UTR3,"Stop Codon")
plot_tx(Start_codon,UTR5,CDS,UTR3,"Start Codon")
plot_tx(m6A_sites,UTR5,CDS,UTR3,"m6A")
```

- SAQ4: Please interpret the computed topology distributions for m6A, which transcript regions are more likely to contain the modification sites? Do the relative positions on the regions important for m6A?  The modification is mostly enriched around which transcript landmarks (e.x. TSS, start codon)? Please explain your reasoning.

- Answer:CDS and 3'UTR. Yes, in the CDS, the m6A can be transfered and in 3'UTR can't. stop codon. When the stop codon added the m6A increased

## 4. Engineering Genomic Features for Site Prediction of Epigentic Markers (25%)

In lab practical 2, we have introduced the unsupervised learning methods for the prediction of tissue labels from gene expression data. Now, we want to again use a machine learning model to predict the modification status on consensus motifs. In this situation, we want to use a supervised learning approach, which means the prediction target is provided to the model during the training process. 

Our training data is stored in the `mcols()` of `m6A_ml`, which contains 1000 training instances for both the positive and negative data. The metadata is a `DataFrame` that has columns for target and sequence-based features. The sequence-based features are 30 variables extracted only from the nucleotide sequences surrounding the modification sites, and their calculation is NOT dependent on the gene annotations (from only BSgenome but not from TxDb). What you need to do is to create the following annotation based genomic features as the additional metadata columns in `m6A_ml`: 

- `UTR5`: a logical variable indicating the site overlapping with 5'UTR.
- `CDS`: a logical variable indicating the site overlapping with CDS.
- `UTR3`: a logical variable indicating the site overlapping with 3'UTR.
- `long_exon`: a logical variable for sites overlapping with long exons (exon length > XXX, XXX is a boundary number choosen by you).
- `Stop_codon`: a logical variable for sites overlapping with the XXX bp centered by a stop codon. (XXX is also choosen by you)
- `UTR3_pos`: a real number value for the relative position of the site on 3'UTR (0 if not on 3'UTR).
- `CDS_pos`: a real number value for the relative position of the site on CDS (0 if not on CDS).

Please fill the following code chunk to add the above mentioned genomic features into the prediction models.

After adding the features, we will run a high-level package to automatically build 4 prediction models and report their performance using 5 folds cross-validation.  The 4 models are the combination of 2 ML algorithms (SVM and RandomForest) and 2 feature types (sequence feature along and sequence + genomic features).

You will get full mark for the coding if the genomic features you engineered can lead to an AUROC of more than 0.70 in any one of the ML algorithms.

```{r}
m6A_ml <- readRDS("m6A_ml.rds") #m6A_ml is a GRanges, its metadata columns are features used in the prediction model

## === Hint code, fill the "___" ============= ##
#m6A_ml$UTR5 <- m6A_ml %___% ___ #add a dummy feature for 5'UTR
#m6A_ml$CDS <- m6A_ml ___ ___ #add a dummy feature for 5'CDS
#m6A_ml$UTR3 <- m6A_ml ___ ___ #add a dummy feature for 3'UTR
#m6A_ml$long_exon <- m6A_ml ___ ___ #add a dummy feature for long exon (> a boundary number)
#m6A_ml$Stop_codon <- m6A_ml ___ ___ #add a dummy feature for stop codon flanked by a choosen number
#m6A_ml$UTR3_pos <- RegionPropertiesFeatures::extractRegionRelativePosition(m6A_ml, UTR3, nomapValue = "0") #a feature for relative position on UTR3
#m6A_ml$CDS_pos <- RegionPropertiesFeatures::extractRegionRelativePosition(m6A_ml, CDS, nomapValue = "0") #a feature for relative position on CDS
# ===== Enter your code below  =============== ##
m6A_ml <- readRDS("m6A_ml.rds") #m6A_ml is a GRanges, its metadata columns are features used in the prediction model
m6A_ml$UTR5 <- m6A_ml %over% UTR5
m6A_ml$CDS <- m6A_ml %over% CDS
m6A_ml$UTR3 <- m6A_ml %over% UTR3
#m6A_ml$long_exon <- m6A_ml %over% long_exon
m6A_ml$Stop_codon <- m6A_ml %over% Stop_codon
m6A_ml$UTR3_pos <- RegionPropertiesFeatures::extractRegionRelativePosition(m6A_ml, UTR3, nomapValue = "0")
m6A_ml$CDS_pos <- RegionPropertiesFeatures::extractRegionRelativePosition(m6A_ml, CDS, nomapValue = "0")
# ===== Your code is finished ================ ##
library(perflite)
library(knitr)
set.seed(102)

perf_results <- performance_class(
  y = list(
    target_1 = as.factor(m6A_ml$m6A),
    target_2 = as.factor(m6A_ml$m6A)
  ), #list of response vectors
  X = list(
    sequence_feature = data.frame( mcols(m6A_ml)[,2:31] ),
    add_genomic_feature =  data.frame( mcols(m6A_ml)[,-1] ) 
  ), #list of feature matrixes
  k = 5, #number of folds in cross validation
  p = 1, #number of parallel computation
  cv_f = c(svm = svm_class,
           randomForest = randomForest_class)  #list of classifier functions.
)

kable(perf_results[[1]], 
       caption = names(perf_results)[1]) 

kable(perf_results[[2]],
       caption = names(perf_results)[2]) 
```

<hr>

![](./ROC_cv.png){width=66%}
<hr>

- SAQ5: For the prediction made by SVM, after adding genomic features (annotation-based), how much the AUROC is improved compared with only using the sequence features? How could you explain such an improvement? If an annotation-based feature is important at improving the prediction performance, could we infer the annotation being biologically/scientifically significant for the predicted epigenetic marker? Please explain your reasoning.

- Answer: 0.0634
the genomic features can help classify the sample into more groups.
Yes
because the annotation can improve the prediction and this annotation may have some relations with the sample.

## Session Info

```{r}
sessionInfo()
```


