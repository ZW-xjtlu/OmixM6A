library(ggplot2)
# Set seed for reproducibility
set.seed(123)
# Generate data for positive correlated bi-variate MVN
mu1 <- c(0, 0)
sigma1 <- matrix(c(1, 0.8, 0.8, 1), nrow=2)
data1 <- MASS::mvrnorm(2000, mu1, sigma1)
# Generate data for zero correlated bi-variate MVN
mu2 <- c(3, 3)
sigma2 <- matrix(c(1, 0, 0, 1), nrow=2)
data2 <- MASS::mvrnorm(3000, mu2, sigma2)
# Create a data frame for plotting
df <- data.frame(
x = c(data1[, 1], data2[, 1]),
y = c(data1[, 2], data2[, 2]),
group = factor(rep(c("Positive Correlated MVN", "Zero Correlated MVN"), c(2000,3000)))
)
# Plot the data
ggplot(df, aes(x = x, y = y, color = group)) +
geom_point(alpha = 0.5) +
scale_color_manual(values = c("red", "blue")) +
labs(x = "X", y = "Y", title = "Illustration of IDR (Independent Discoveries Region)", fill = "Density") +
theme_minimal()
library(ggplot2)
# Set seed for reproducibility
set.seed(123)
# Generate data for positive correlated bi-variate MVN
mu1 <- c(0, 0)
sigma1 <- matrix(c(1, 0.8, 0.8, 1), nrow=2)
data1 <- MASS::mvrnorm(1000, mu1, sigma1)
# Generate data for zero correlated bi-variate MVN
mu2 <- c(3, 3)
sigma2 <- matrix(c(1, 0, 0, 1), nrow=2)
data2 <- MASS::mvrnorm(1500, mu2, sigma2)
# Create a data frame for plotting
df <- data.frame(
x = c(data1[, 1], data2[, 1]),
y = c(data1[, 2], data2[, 2]),
group = factor(rep(c("Positive Correlated MVN", "Zero Correlated MVN"), c(1000,1500)))
)
# Plot the data
ggplot(df, aes(x = x, y = y, color = group)) +
geom_point(alpha = 0.4) +
scale_color_manual(values = c("red", "blue")) +
labs(x = "X", y = "Y", title = "Illustration of IDR (Independent Discoveries Region)", fill = "Density") +
theme_minimal()
install.packages("roxygen2")
install.packages("roxygen2")
#' m6A_se <- readRDS(system.file("extdata", "example_se.rds", package="OmixM6A"))
#' m6A_counts <- assays(m6A_se)$m6A[,1]
#' total_counts <- assays(m6A_se)$Total[,1]
#' result_df <- OmixM6A(m6A_counts, total_counts)
#' result_df
#'
#' # Example usage with a SummarizedExperiment object
#' result_se <- OmixM6A(se = m6A_se)
#' result_se
#'
OmixM6A <- function(m6A, Total, se = NULL, method = c("bbmix", "bmix", "zoibbmix", "zoibmix", "bumix"), bbmix_size = 10000){
method <- match.arg(method)
if(!is.null(se)){
stopifnot(is(se, "SummarizedExperiment"))
stopifnot(all(assays(se)$Total-assays(se)$m6A >=0))
assays(se, withDimnames=FALSE)$beta <- matrix(nrow = nrow(se), ncol = ncol(se))
assays(se, withDimnames=FALSE)$prob_fg <- matrix(nrow = nrow(se), ncol = ncol(se))
assays(se, withDimnames=FALSE)$pvalue <- matrix(nrow = nrow(se), ncol = ncol(se))
assays(se, withDimnames=FALSE)$fdr <- matrix(nrow = nrow(se), ncol = ncol(se))
metadata(se)$OmixM6A_para <- data.frame(bg_proportion = rep(NA, ncol(se)))
rownames(metadata(se)$OmixM6A_para) <- colnames(se)
for(i in seq_len(ncol(se))){
if(method == "bmix"){
fit_i <- fit_bmix(assays(se)$m6A[,i], assays(se)$Total[,i])
}else if(method == "bbmix"){
fit_i <- fit_bbmix(assays(se)$m6A[,i], assays(se)$Total[,i], subsize = bbmix_size)
}else if(method == "zoibbmix"){
fit_i <- fit_zoibbmix(assays(se)$m6A[,i], assays(se)$Total[,i])
}else if(method == "zoibmix"){
fit_i <- fit_zoibmix(assays(se)$m6A[,i], assays(se)$Total[,i])
}else if(method == "bumix"){
fit_i <- fit_bumix(assays(se)$m6A[,i], assays(se)$Total[,i])
}
}
assays(se)$beta[,i] <- fit_i$beta
assays(se)$prob_fg[,i] <- fit_i$prob_fg
assays(se)$pvalue[,i] <- fit_i$pvalue
assays(se)$fdr[,i] <- p.adjust(fit_i$pvalue, method = "fdr")
for(j in names(fit_i$para)){
metadata(se)$OmixM6A_para[[j]][i] <- fit_i$para[[j]]
}
}
return(se)
}else{
#' m6A_se <- readRDS(system.file("extdata", "example_se.rds", package="OmixM6A"))
#' m6A_counts <- assays(m6A_se)$m6A[,1]
#' total_counts <- assays(m6A_se)$Total[,1]
#' result_df <- OmixM6A(m6A_counts, total_counts)
#' result_df
#'
#' # Example usage with a SummarizedExperiment object
#' result_se <- OmixM6A(se = m6A_se)
#' result_se
#'
OmixM6A <- function(m6A, Total, se = NULL, method = c("bbmix", "bmix", "zoibbmix", "zoibmix", "bumix"), bbmix_size = 10000){
method <- match.arg(method)
if(!is.null(se)){
stopifnot(is(se, "SummarizedExperiment"))
stopifnot(all(assays(se)$Total-assays(se)$m6A >=0))
assays(se, withDimnames=FALSE)$beta <- matrix(nrow = nrow(se), ncol = ncol(se))
assays(se, withDimnames=FALSE)$prob_fg <- matrix(nrow = nrow(se), ncol = ncol(se))
assays(se, withDimnames=FALSE)$pvalue <- matrix(nrow = nrow(se), ncol = ncol(se))
assays(se, withDimnames=FALSE)$fdr <- matrix(nrow = nrow(se), ncol = ncol(se))
metadata(se)$OmixM6A_para <- data.frame(bg_proportion = rep(NA, ncol(se)))
rownames(metadata(se)$OmixM6A_para) <- colnames(se)
for(i in seq_len(ncol(se))){
if(method == "bmix"){
fit_i <- fit_bmix(assays(se)$m6A[,i], assays(se)$Total[,i])
}else if(method == "bbmix"){
fit_i <- fit_bbmix(assays(se)$m6A[,i], assays(se)$Total[,i], subsize = bbmix_size)
}else if(method == "zoibbmix"){
fit_i <- fit_zoibbmix(assays(se)$m6A[,i], assays(se)$Total[,i])
}else if(method == "zoibmix"){
fit_i <- fit_zoibmix(assays(se)$m6A[,i], assays(se)$Total[,i])
}else if(method == "bumix"){
fit_i <- fit_bumix(assays(se)$m6A[,i], assays(se)$Total[,i])
}
}
assays(se)$beta[,i] <- fit_i$beta
assays(se)$prob_fg[,i] <- fit_i$prob_fg
assays(se)$pvalue[,i] <- fit_i$pvalue
assays(se)$fdr[,i] <- p.adjust(fit_i$pvalue, method = "fdr")
for(j in names(fit_i$para)){
metadata(se)$OmixM6A_para[[j]][i] <- fit_i$para[[j]]
}
return(se)
}else{
if (method == "bmix") {
fit <- fit_bmix(m6A, Total)
} else if (method == "bbmix") {
fit <- fit_bbmix(m6A, Total, subsize = bbmix_size)
} else if (method == "zoibmix") {
fit <- fit_zoibmix(m6A, Total, subsize = bbmix_size)
} else if (method == "zoibbmix") {
fit <- fit_zoibbmix(m6A, Total, subsize = bbmix_size)
} else if (method == "bumix"){
fit <- fit_bumix(m6A, Total)
}
result_tbl <- data.frame(m6A_count = m6A,
Total_count = Total,
beta = fit$beta,
prob_fg = fit$prob_fg,
pvalue = fit$pvalue,
fdr = p.adjust(fit$pvalue, method = "fdr"))
return(result_tbl)
}
}
library(OmixM6A)
library(OmixM6A)
?OmixM6A
m6A_se <- readRDS(system.file("extdata", "example_se.rds", package="OmixM6A"))
m6A_counts <- assays(m6A_se)$m6A[,1]
library(SummarizedExperiment)
m6A_se <- readRDS(system.file("extdata", "example_se.rds", package="OmixM6A"))
m6A_counts <- assays(m6A_se)$m6A[,1]
total_counts <- assays(m6A_se)$Total[,1]
result_df <- OmixM6A(m6A_counts, total_counts, method = "zoibmix")
OmixM6A:::fit_zoibmix
m6A_se <- readRDS(system.file("extdata", "example_se.rds", package="OmixM6A"))
m6A_counts <- assays(m6A_se)$m6A[,1]
total_counts <- assays(m6A_se)$Total[,1]
result_df <- OmixM6A(m6A_counts, total_counts, method = "zoibmix")
rm(OmixM6A)
m6A_se <- readRDS(system.file("extdata", "example_se.rds", package="OmixM6A"))
m6A_counts <- assays(m6A_se)$m6A[,1]
total_counts <- assays(m6A_se)$Total[,1]
result_df <- OmixM6A(m6A_counts, total_counts, method = "zoibmix")
m6A_se <- readRDS(system.file("extdata", "example_se.rds", package="OmixM6A"))
m6A_counts <- assays(m6A_se)$m6A[,1]
total_counts <- assays(m6A_se)$Total[,1]
result_df <- OmixM6A(m6A_counts, total_counts, method = "bbmix")
}
#' m6A_se <- readRDS(system.file("extdata", "example_se.rds", package="OmixM6A"))
#' m6A_counts <- assays(m6A_se)$m6A[,1]
#' total_counts <- assays(m6A_se)$Total[,1]
#' result_df <- OmixM6A(m6A_counts, total_counts)
#' result_df
#'
#' # Example usage with a SummarizedExperiment object
#' result_se <- OmixM6A(se = m6A_se)
#' result_se
#'
OmixM6A <- function(m6A, Total, se = NULL, method = c("bbmix", "bmix", "zoibbmix", "zoibmix", "bumix"), bbmix_size = NULL, cov_threshold = 0){
method <- match.arg(method)
if(!is.null(se)){
stopifnot(is(se, "SummarizedExperiment"))
stopifnot(all(assays(se)$Total-assays(se)$m6A >=0))
assays(se, withDimnames=FALSE)$beta <- matrix(nrow = nrow(se), ncol = ncol(se))
assays(se, withDimnames=FALSE)$prob_fg <- matrix(nrow = nrow(se), ncol = ncol(se))
assays(se, withDimnames=FALSE)$pvalue <- matrix(nrow = nrow(se), ncol = ncol(se))
assays(se, withDimnames=FALSE)$fdr <- matrix(nrow = nrow(se), ncol = ncol(se))
metadata(se)$OmixM6A_para <- data.frame(bg_proportion = rep(NA, ncol(se)))
rownames(metadata(se)$OmixM6A_para) <- colnames(se)
for(i in seq_len(ncol(se))){
if(method == "bmix"){
fit_i <- fit_bmix(assays(se)$m6A[,i], assays(se)$Total[,i], cov_threshold)
}else if(method == "bbmix"){
fit_i <- fit_bbmix(assays(se)$m6A[,i], assays(se)$Total[,i], subsize = bbmix_size, cov_threshold)
}else if(method == "zoibbmix"){
fit_i <- fit_zoibbmix(assays(se)$m6A[,i], assays(se)$Total[,i], subsize = bbmix_size, cov_threshold)
}else if(method == "zoibmix"){
fit_i <- fit_zoibmix(assays(se)$m6A[,i], assays(se)$Total[,i], cov_threshold)
}else if(method == "bumix"){
fit_i <- fit_bumix(assays(se)$m6A[,i], assays(se)$Total[,i], cov_threshold)
}
assays(se)$beta[,i] <- fit_i$beta
assays(se)$prob_fg[,i] <- fit_i$prob_fg
assays(se)$pvalue[,i] <- fit_i$pvalue
assays(se)$fdr[,i] <- p.adjust(fit_i$pvalue, method = "fdr")
for(j in names(fit_i$para)){
metadata(se)$OmixM6A_para[[j]][i] <- fit_i$para[[j]]
}
}
return(se)
}else{
if (method == "bmix") {
fit <- fit_bmix(m6A, Total, cov_threshold)
} else if (method == "bbmix") {
fit <- fit_bbmix(m6A, Total, subsize = bbmix_size, cov_threshold)
} else if (method == "zoibmix") {
fit <- fit_zoibmix(m6A, Total, cov_threshold)
} else if (method == "zoibbmix") {
fit <- fit_zoibbmix(m6A, Total, subsize = bbmix_size, cov_threshold)
} else if (method == "bumix"){
fit <- fit_bumix(m6A, Total, cov_threshold)
}
result_tbl <- data.frame(m6A_count = m6A,
Total_count = Total,
beta = fit$beta,
prob_fg = fit$prob_fg,
pvalue = fit$pvalue,
fdr = p.adjust(fit$pvalue, method = "fdr"))
return(result_tbl)
}
}
library(OmixM6A)
?OmixM6A
# Example usage with count vectors
library(SummarizedExperiment)
m6A_se <- readRDS(system.file("extdata", "example_se.rds", package="OmixM6A"))
m6A_counts <- assays(m6A_se)$m6A[,1]
total_counts <- assays(m6A_se)$Total[,1]
result_df <- OmixM6A(m6A_counts, total_counts, method = "zoibmix")
rm(OmixM6A())
rm(OmixM6A)
# Example usage with count vectors
library(SummarizedExperiment)
m6A_se <- readRDS(system.file("extdata", "example_se.rds", package="OmixM6A"))
m6A_counts <- assays(m6A_se)$m6A[,1]
total_counts <- assays(m6A_se)$Total[,1]
result_df <- OmixM6A(m6A_counts, total_counts, method = "zoibmix")
result_df
result_se <- OmixM6A(se = m6A_se)
result_se <- OmixM6A(se = m6A_se, fit = "zoibmix")
result_se <- OmixM6A(se = m6A_se, method = "zoibmix")
result_se
metadata( result_se )
result_se <- OmixM6A(se = m6A_se, method = "zoibbmix")
rm(fit_zoibbmix)
result_se <- OmixM6A(se = m6A_se, method = "zoibbmix")
result_se <- OmixM6A(se = m6A_se, method = "zoibbmix")
result_se
metadata(result_se)
result_se
assays(result_se)$fg_prob
names(assays(result_se))
assays(result_se)$prob_fg
colData(m6A_se)
cor(assays(result_se)$prob_fg)
metadata(result_se)
result_se <- OmixM6A(se = m6A_se, method = "bbmix")
result_se
metadata(result_se)
cor(assays(result_se)$pvalue)
cor(assays(result_se)$beta)
library(OmixM6A)
install.packages("VGAM")
?VGAM
VGAM
??VGAM
library("VGAM")
?VGAM::betabinomial
VGAM::betabinomial
VGAM::betabinomialff()
?VGAM::betabinomialff()
OmixM6A:::BB_WMLE()
OmixM6A:::BB_WMLE
?binomial.test
binomial.test
?binom.test()
install.packages("torch")
?torch::nn_multihead_attention()
dplyr::import("/Users/weizhen/Downloads/ENCORI_hg38_Genomic_Corrdinates_SBDH251.bed")
import("/Users/weizhen/Downloads/ENCORI_hg38_Genomic_Corrdinates_SBDH251.bed")
install.packages("BiocManager")
BiocManager::install("rtracklayer")
library(rtracklayer)
import("/Users/weizhen/Downloads/ENCORI_hg38_Genomic_Corrdinates_SBDH251.bed")
import("/Users/weizhen/Downloads/ENCORI_hg38_Genomic_Corrdinates_SBDH250.bed")
read.table("/Users/weizhen/Downloads/reference_data/hg38_all_dataset_info_table.txt")
install.packages("readr")
X <- readr::read_tsv("/Users/weizhen/Downloads/reference_data/hg38_all_dataset_info_table.txt")
X
X$MainAccession
X$Source
X <- X[X$Source == "ENCODE",]
X
X$newFileName
X$`FileName-RBP`
X$DataSetId
write.csv(X, "data_table.csv")
X
85
68
48
42
20
39
38
0
69
45
85
51
69
68
82
36
51
39
94
18
53
47
67
80
90.5
62
46
48
62
58
71
56
64
90
82
44
55
41
82
30
23
71
33
26
66
56
51
47
74
58
67
24
54
0
48
# Concatenate the numbers into a vector
numbers <- c(85, 68, 48, 42, 20, 39, 38, 0, 69, 45, 85, 51, 69, 68, 82, 36, 51, 39, 94, 18, 53, 47, 67, 80, 90.5, 62, 46, 48, 62, 58, 71, 56, 64, 90, 82, 44, 55, 41, 82, 30, 23, 71, 33, 26, 66, 56, 51, 47, 74, 58, 67, 24, 54, 0, 48)
# Print the vector to check
print(numbers)
mean(numbers >= 64)
X <- rtracklayer::import("/Users/weizhen/Downloads/ENCORI_hg38_Genomic_Corrdinates_SBDH174.bed")
X
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TxDb.Hsapiens.UCSC.hg38.knownGene")
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
X %over% genes(TxDb.Hsapiens.UCSC.hg38.knownGene)
mean(X %over% transcripts(TxDb.Hsapiens.UCSC.hg38.knownGene))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TxDb.Hsapiens.UCSC.hg19.knownGene")
mean(X %over% transcripts(TxDb.Hsapiens.UCSC.hg38.knownGene))
mean(X %over% transcripts(TxDb.Hsapiens.UCSC.hg19.knownGene))
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
mean(X %over% transcripts(TxDb.Hsapiens.UCSC.hg19.knownGene))
mean(X %over% genes(TxDb.Hsapiens.UCSC.hg19.knownGene))
?fisher.test()
rbinom(1,m,p)/m - rbinom(1,n,p)/n
m = 20
n = 30
p = 0.5
rbinom(1,m,p)/m - rbinom(1,n,p)/n
Wald_stat_chisq <- function(m,n,p){
p1h <- rbinom(1,m,p)/m
p2h <- rbinom(1,n,p)/n
((m+n)*(p1h - p2h)^2)/((p1h*(1-p1h)/n)+(p2h*(1-p2h))/m)
}
Wald_stat_chisq <- function(m,n,p){
p1h <- rbinom(1,m,p)/m
p2h <- rbinom(1,n,p)/n
((m+n)*(p1h - p2h)^2)/((p1h*(1-p1h)/n)+(p2h*(1-p2h))/m)
}
replicate(500, Wald_stat_chisq(30,20,0.5))
hist(replicate(500, Wald_stat_chisq(30,20,0.5)))
hist(replicate(500, Wald_stat_chisq(30,20,0.2)))
hist(replicate(500, Wald_stat_chisq(30,20,0.2)))
hist(replicate(500, Wald_stat_chisq(30,20,0.2)))
hist(replicate(500, Wald_stat_chisq(30,20,0.2)))
hist(replicate(500, Wald_stat_chisq(30,20,0.1)))
hist(replicate(500, Wald_stat_chisq(30,20,0.5)))
hist(rchisq(500,1))
hist(replicate(500, Wald_stat_chisq(30,20,0.5)))
Wald_stat_chisq <- function(m,n,p){
p1h <- rbinom(1,m,p)/m
p2h <- rbinom(1,n,p)/n
((p1h - p2h)^2)/((p1h*(1-p1h)/n)+(p2h*(1-p2h)/m))
}
hist(replicate(500, Wald_stat_chisq(30,20,0.5)))
Wald_stat_chisq <- function(m,n,p){
p1h <- rbinom(1,m,p)/m
p2h <- rbinom(1,n,p)/n
((p1h - p2h)^2)/((p1h*(1-p1h)/n)+(p2h*(1-p2h)/m))
}
hist(replicate(500, Wald_stat_chisq(30,20,0.5)))
hist(rchisq(500,1))
?glm
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
?geom_density
library(ggplot2)
?geom_density
install.packages("luz")
install.packages("luz")
library(torch)
library(torch)
t1 <- torch_tensor(1)
t1
t1$dtype
t1$device
t1$shape
t2 <- t1$to(dtype = torch_int())
t2$dtype
# only applicable if you have a GPU
t2 <- t1$to(device = "cuda")
t3 <- t1$view(c(1, 1))
t3$shape
torch_tensor(1:5)
torch_tensor(1:5, dtype = torch_float())
torch_tensor(matrix(1:9, ncol = 3))
torch_tensor(matrix(1:9, ncol = 3, byrow = TRUE))
torch_tensor(array(1:24, dim = c(4, 3, 2)))
torch_randn(3, 3)
torch_rand(3, 3)
torch_zeros(2, 5)
torch_ones(2, 2)
torch_eye(n = 5)
torch_diag(c(1, 2, 3))
JohnsonJohnson
torch_tensor(JohnsonJohnson)
unclass(JohnsonJohnson)
library(dplyr)
glimpse(Orange)
torch_tensor(Orange)
f <- factor(c("a", "b", "c"), ordered = TRUE)
torch_tensor(f)
orange_ <- Orange %>%
mutate(Tree = as.numeric(Tree)) %>%
as.matrix()
torch_tensor(orange_) %>% print(n = 7)
library(modeldata)
library(torch)
convnet <- nn_module(
"convnet",
initialize = function() {
# nn_conv2d(in_channels, out_channels, kernel_size)
self$conv1 <- nn_conv2d(1, 16, 3)
self$conv2 <- nn_conv2d(16, 32, 3)
self$conv3 <- nn_conv2d(32, 64, 3)
self$output <- nn_linear(2304, 3)
},
forward = function(x) {
x %>%
self$conv1() %>%
nnf_relu() %>%
nnf_max_pool2d(2) %>%
self$conv2() %>%
nnf_relu() %>%
nnf_max_pool2d(2) %>%
self$conv3() %>%
nnf_relu() %>%
nnf_max_pool2d(2) %>%
torch_flatten(start_dim = 2) %>%
self$output()
}
)
model <- convnet()
img <- torch_randn(1, 1, 64, 64)
model(img)
install.packages("DiagrammeR")
install.packages("library(DiagrammeR)")
install.packages("luz")
install.packages("luz")
install.packages("DiagrammeR")
